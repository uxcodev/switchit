{"ast":null,"code":"let api = {\n  async createToken(email) {\n    try {\n      let body = {\n        email: email,\n        id: '1234'\n      };\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      };\n      let url = process.env.VUE_APP_API_URL;\n      const response = await fetch(`${url}/users/create-token`, options);\n      console.log('createToken response');\n      const data = await response.json();\n      localStorage.setItem('switchit_token', data.token);\n      return data;\n    } catch (err) {\n      console.error(err);\n    }\n  },\n  async getUsers() {\n    let token = localStorage.getItem('switchit_token');\n    try {\n      const options = {\n        method: \"GET\",\n        headers: {\n          accept: \"application/json\",\n          authorization: `Bearer ${token}`\n        }\n      };\n      let url = process.env.VUE_APP_API_URL;\n      const response = await fetch(`${url}/users/get-users`, options);\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      console.error(err);\n    }\n  },\n  async updateUser(id, fields) {\n    try {\n      let token = localStorage.getItem('switchit_token');\n      let body = {\n        id: id,\n        fields: fields\n      };\n      const options = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify(body)\n      };\n      let url = process.env.VUE_APP_API_URL;\n      const response = await fetch(`${url}/users/update-user`, options);\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["api","createToken","email","body","id","options","method","headers","JSON","stringify","url","process","env","VUE_APP_API_URL","response","fetch","console","log","data","json","localStorage","setItem","token","err","error","getUsers","getItem","accept","authorization","updateUser","fields"],"sources":["/Users/nick/Sites/switchit-vue/src/api/switchit.js"],"sourcesContent":["let api = {\n\n\n  async createToken(email) {\n    try {\n      let body = {\n        email: email,\n        id: '1234'\n      }\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body)\n      }\n\n      let url = process.env.VUE_APP_API_URL\n      const response = await fetch(\n        `${url}/users/create-token`,\n        options\n      )\n      console.log('createToken response')\n      const data = await response.json();\n      localStorage.setItem('switchit_token', data.token)\n      return data;\n    } catch (err) {\n      console.error(err);\n    }\n  },\n\n  async getUsers() {\n\n    let token = localStorage.getItem('switchit_token');\n    try {\n      const options = {\n        method: \"GET\",\n        headers: {\n          accept: \"application/json\",\n          authorization: `Bearer ${token}`,\n        },\n      };\n\n      let url = process.env.VUE_APP_API_URL\n      const response = await fetch(\n        `${url}/users/get-users`,\n        options\n      );\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      console.error(err);\n    }\n  },\n\n  async updateUser(id, fields) {\n    try {\n      let token = localStorage.getItem('switchit_token');\n      let body = {\n        id: id,\n        fields: fields\n      }\n      const options = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body)\n      }\n\n      let url = process.env.VUE_APP_API_URL\n      const response = await fetch(\n        `${url}/users/update-user`,\n        options\n      )\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      console.error(err);\n    }\n  },\n\n}\n\nexport default api"],"mappings":"AAAA,IAAIA,GAAG,GAAG;EAGR,MAAMC,WAAW,CAACC,KAAK,EAAE;IACvB,IAAI;MACF,IAAIC,IAAI,GAAG;QACTD,KAAK,EAAEA,KAAK;QACZE,EAAE,EAAE;MACN,CAAC;MACD,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDJ,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;MAC3B,CAAC;MAED,IAAIO,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe;MACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEL,GAAI,qBAAoB,EAC3BL,OAAO,CACR;MACDW,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAClCC,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEH,IAAI,CAACI,KAAK,CAAC;MAClD,OAAOJ,IAAI;IACb,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAACD,GAAG,CAAC;IACpB;EACF,CAAC;EAED,MAAME,QAAQ,GAAG;IAEf,IAAIH,KAAK,GAAGF,YAAY,CAACM,OAAO,CAAC,gBAAgB,CAAC;IAClD,IAAI;MACF,MAAMrB,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPoB,MAAM,EAAE,kBAAkB;UAC1BC,aAAa,EAAG,UAASN,KAAM;QACjC;MACF,CAAC;MAED,IAAIZ,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe;MACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEL,GAAI,kBAAiB,EACxBL,OAAO,CACR;MACD,MAAMa,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAACD,GAAG,CAAC;IACpB;EACF,CAAC;EAED,MAAMM,UAAU,CAACzB,EAAE,EAAE0B,MAAM,EAAE;IAC3B,IAAI;MACF,IAAIR,KAAK,GAAGF,YAAY,CAACM,OAAO,CAAC,gBAAgB,CAAC;MAClD,IAAIvB,IAAI,GAAG;QACTC,EAAE,EAAEA,EAAE;QACN0B,MAAM,EAAEA;MACV,CAAC;MACD,MAAMzB,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCqB,aAAa,EAAG,UAASN,KAAM;QACjC,CAAC;QACDnB,IAAI,EAAEK,IAAI,CAACC,SAAS,CAACN,IAAI;MAC3B,CAAC;MAED,IAAIO,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe;MACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEL,GAAI,oBAAmB,EAC1BL,OAAO,CACR;MACD,MAAMa,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAACD,GAAG,CAAC;IACpB;EACF;AAEF,CAAC;AAED,eAAevB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}